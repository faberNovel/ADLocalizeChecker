disabled_rules: # rule identifiers to exclude from running
  # - block_based_kvo
  # - class_delegate_protocol
  # - closing_brace
  # - closure_parameter_position
  # - colon
  # - comma
  # - compiler_protocol_init
  # - control_statement
  # - cyclomatic_complexity
  # - discarded_notification_center_observer
  # - discouraged_direct_init
  # - dynamic_inline
  # - empty_enum_arguments
  # - empty_parameters
  # - empty_parentheses_with_trailing_closure
  # - fallthrough
  # - file_length
  # - for_where
  # - force_cast
  # - force_try
  # - function_body_length
  # - function_parameter_count
  # - generic_type_name
  # - identifier_name
  # - implicit_getter
  # - is_disjoint
  # - large_tuple
  # - leading_whitespace
  # - legacy_cggeometry_functions
  # - legacy_constant
  # - legacy_constructor
  # - legacy_nsgeometry_functions
  # - line_length
  # - mark
  # - multiple_closures_with_trailing_closure
  # - nesting
  # - notification_center_detachment
  # - opening_brace
  # - operator_whitespace
  # - private_over_fileprivate
  # - private_unit_test
  # - protocol_property_accessors_order
  # - redundant_discardable_let
  # - redundant_optional_initialization
  # - redundant_string_enum_value
  # - redundant_void_return
  # - return_arrow_whitespace
  # - shorthand_operator
  # - statement_position
  # - superfluous_disable_command
  # - switch_case_alignment
  # - syntactic_sugar
  - todo
  - trailing_comma
  # - trailing_newline
  # - trailing_semicolon
  # - trailing_whitespace
  # - type_body_length
  # - type_name
  # - unneeded_break_in_switch
  # - unused_closure_parameter
  # - unused_enumerated
  # - unused_optional_binding
  # - valid_ibinspectable
  # - vertical_parameter_alignment
  # - vertical_whitespace
  # - void_return
  # - weak_delegate
  # - xctfail_message

opt_in_rules:
  # - attributes
  - closure_end_indentation
  - closure_spacing
  # - conditional_returns_on_newline
  - contains_over_first_not_nil
  - discouraged_object_literal
  - discouraged_optional_boolean
  - discouraged_optional_collection
  - empty_count
  - empty_string
  # - explicit_acl
  # - explicit_enum_raw_value
  - explicit_init
  # - explicit_top_level_acl
  # - explicit_type_interface
  # - extension_access_modifier
  - fatal_error_message
  # - file_header
  - first_where
  - force_unwrapping
  # - implicit_return
  - implicitly_unwrapped_optional
  # - joined_default_parameter
  # - let_var_whitespace
  - literal_expression_end_indentation
  - multiline_arguments
  - multiline_parameters
  # - no_extension_access_modifier
  # - no_grouping_extension
  # - number_separator
  # - object_literal
  - operator_usage_whitespace
  - overridden_super_call
  - override_in_extension
  - pattern_matching_keywords
  # - prefixed_toplevel_constant
  - private_action
  - private_outlet
  # - prohibited_super_call
  - quick_discouraged_call
  - quick_discouraged_focused_test
  - quick_discouraged_pending_test
  - redundant_nil_coalescing
  # - required_enum_case
  - single_test_class
  - sorted_first_last
  # - sorted_imports
  # - strict_fileprivate
  - switch_case_on_newline
  # - trailing_closure
  # - unneeded_parentheses_in_closure_argument
  - untyped_error_in_catch
  - vertical_parameter_alignment_on_call
  - yoda_condition

# rule configuration
cyclomatic_complexity:
  warning: 10
  error: 20
force_cast: warning
force_try: warning
function_body_length:
  warning: 35
  error: 50
identifier_name:
  min_length:
    warning: 0
    error: 0
  max_length:
    warning: 100
    error: 200
  allowed_symbols: '_'
line_length:
  warning: 120
  error: 160
type_name:
  min_length:
    warning: 0
    error: 0
  max_length:
    warning: 100
    error: 200

custom_rules:
  double_space:
    include: "*.swift"
    name: "Double space"
    regex: '([a-z,A-Z] \s+)'
    message: "Double space between keywords"
    match_kinds: keyword
    severity: warning
  boolean_operators_end_of_line:
    include: "*.swift"
    name: "Boolean Operators"
    regex: '((?:&&|\|\|)$)'
    message: "Boolean operators should not be at the end of line"
    severity: warning
  explicit_failure_calls:
    name: "Avoid asserting 'false'"
    regex: '((assert|precondition)\(false)'
    message: "Use assertionFailure() or preconditionFailure() instead."
    severity: warning
  comments_space:
    name: "Space After Comment"
    regex: '(^ *//(?!(MARK|TODO))\w+)'
    message: "There should be a space after //"
    severity: warning
  unnecessary_type:
    name: "Unnecessary Type"
    regex: '[ a-zA-Z0-9]*(?:let|var) [ a-zA-Z0-9]*: ([a-zA-Z0-9]*)[\? ]*= \1\('
    message: "Type Definition Not Needed"
    severity: warning
    # ex:
    #  - KO: let type: Type = Type()
    #  - OK: let type: Type = Type.staticVar
  uppercamelcased_enum:
    name: "Enum in UpperCamelCase"
    regex: '(?:enum) [a-z0-9]'
    message: "Enum names should be in UpperCamelCase"
    severity: warning

excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods
